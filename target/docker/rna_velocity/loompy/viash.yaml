functionality:
  name: "loompy"
  namespace: "rna_velocity"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Path to the .fastq.gz files to align and perform RNA velocity on."
    example:
    - "/path/to/fastqs"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--reference_genome"
    alternatives: []
    description: "The path to the reference genome."
    example: []
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--metadata"
    alternatives: []
    description: "The path to the metadata file."
    example: []
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--partition_id"
    alternatives: []
    description: "The index of the sample group."
    example: []
    default: []
    required: false
    values: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--num_partitions"
    alternatives: []
    description: "The number of partitions"
    example: []
    default:
    - 10
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--cell_count"
    alternatives: []
    description: "The number of cells."
    example: []
    default:
    - 3000
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The folder to store the results in"
    example:
    - "/path/to/output"
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # loompy main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.12 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="loompy"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "loompy main_build"
        echo ""
        echo "Uknown"
        echo ""
        echo "Usage:"
        echo "python script.py \\"
        echo "  --input /path/to/bcl \\"
        echo "  --sample_sheet sample_sheet.csv \\"
        echo "  --output fastqs"
        echo ""
        echo "Options:"
        echo "    --input"
        echo "        type: file, required parameter"
        echo "        example: /path/to/fastqs"
        echo "        Path to the .fastq.gz files to align and perform RNA velocity on."
        echo ""
        echo "    --reference_genome"
        echo "        type: file, required parameter"
        echo "        The path to the reference genome."
        echo ""
        echo "    --metadata"
        echo "        type: file, required parameter"
        echo "        The path to the metadata file."
        echo ""
        echo "    --partition_id"
        echo "        type: string"
        echo "        The index of the sample group."
        echo ""
        echo "    --num_partitions"
        echo "        type: integer"
        echo "        default: 10"
        echo "        The number of partitions"
        echo ""
        echo "    --cell_count"
        echo "        type: integer"
        echo "        default: 3000"
        echo "        The number of cells."
        echo ""
        echo "    --output"
        echo "        type: file, required parameter, output"
        echo "        example: /path/to/output"
        echo "        The folder to store the results in"
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM ghcr.io/data-intuitive/cellranger:6.1
      
      RUN :
      LABEL org.opencontainers.image.description="Companion container for running component rna_velocity loompy"
      LABEL org.opencontainers.image.source="https://github.com/czbiohub/utilities"
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-loompy-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "loompy main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --reference_genome)
                  VIASH_PAR_REFERENCE_GENOME="$2"
                  shift 2
                  ;;
              --reference_genome=*)
                  VIASH_PAR_REFERENCE_GENOME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --metadata)
                  VIASH_PAR_METADATA="$2"
                  shift 2
                  ;;
              --metadata=*)
                  VIASH_PAR_METADATA=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --partition_id)
                  VIASH_PAR_PARTITION_ID="$2"
                  shift 2
                  ;;
              --partition_id=*)
                  VIASH_PAR_PARTITION_ID=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --num_partitions)
                  VIASH_PAR_NUM_PARTITIONS="$2"
                  shift 2
                  ;;
              --num_partitions=*)
                  VIASH_PAR_NUM_PARTITIONS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --cell_count)
                  VIASH_PAR_CELL_COUNT="$2"
                  shift 2
                  ;;
              --cell_count=*)
                  VIASH_PAR_CELL_COUNT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build'
        exit 0
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        ViashError '--reference_genome' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_METADATA" ]; then
        ViashError '--metadata' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_NUM_PARTITIONS" ]; then
        VIASH_PAR_NUM_PARTITIONS="10"
      fi
      if [ -z "$VIASH_PAR_CELL_COUNT" ]; then
        VIASH_PAR_CELL_COUNT="3000"
      fi
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT")"
        VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
      fi
      if [ ! -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_REFERENCE_GENOME")"
        VIASH_PAR_REFERENCE_GENOME=$(ViashAutodetectMount "$VIASH_PAR_REFERENCE_GENOME")
      fi
      if [ ! -z "$VIASH_PAR_METADATA" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_METADATA")"
        VIASH_PAR_METADATA=$(ViashAutodetectMount "$VIASH_PAR_METADATA")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
      VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap ViashPerformChown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/czbiohub/utilities/rna_velocity_loompy:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-loompy-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      #!/usr/bin/env python
      import argparse
      import datetime
      import os
      import pathlib
      import re
      import subprocess
      import tarfile
      import time
      import csv
      
      from collections import defaultdict
      
      ### VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
        'reference_genome': $( if [ ! -z ${VIASH_PAR_REFERENCE_GENOME+x} ]; then echo "'${VIASH_PAR_REFERENCE_GENOME//\'/\\\'}'"; else echo None; fi ),
        'metadata': $( if [ ! -z ${VIASH_PAR_METADATA+x} ]; then echo "'${VIASH_PAR_METADATA//\'/\\\'}'"; else echo None; fi ),
        'partition_id': $( if [ ! -z ${VIASH_PAR_PARTITION_ID+x} ]; then echo "'${VIASH_PAR_PARTITION_ID//\'/\\\'}'"; else echo None; fi ),
        'num_partitions': $( if [ ! -z ${VIASH_PAR_NUM_PARTITIONS+x} ]; then echo "int('${VIASH_PAR_NUM_PARTITIONS//\'/\\\'}')"; else echo None; fi ),
        'cell_count': $( if [ ! -z ${VIASH_PAR_CELL_COUNT+x} ]; then echo "int('${VIASH_PAR_CELL_COUNT//\'/\\\'}')"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ### VIASH END
      
      # valid reference genomes
      reference_genomes_indexes = {
          "homo": "human_GRCh38_gencode.v31",
      }
      
      # other helpful constants
      LOOMPY = "loompy"
      CURR_MIN_VER = datetime.datetime(2017, 3, 1, tzinfo=datetime.timezone.utc)
      
      run_dir = par["output"] / "data"
      run_dir.mkdir(parents=True)
      
      # extract sample name(s) and technology from the metadata tsv file
      metadata_name = os.path.basename(par["metadata"])
      
      technology, sample_name = "", ""
      
      with open(par["metadata"]) as fd:
          rd = csv.reader(fd, delimiter="\\t", quotechar='"')
          file_content = list()
          for row in rd:
              file_content.append(row)
          file_content = file_content[1:]
          sample_name = file_content[0][0]
          technology = file_content[0][
              1
          ]  # need to fix this later to fit tsv file with multiple samples
      
      # check if the input genome is valid
      if par["taxon"] in reference_genomes_indexes:
          genome_name = reference_genomes_indexes[par["taxon"]]
      else:
          raise ValueError(f"unknown taxon {par["taxon"]}")
      
      
      # extract valid fastq files
      sample_re_smartseq2 = re.compile("([^/]+)_R\\d(?:_\\d+)?.fastq.gz\$")
      sample_re_10x = re.compile("([^/]+)_L\\d+_R\\d(?:_\\d+)?.fastq.gz\$")
      s3_output_bucket, s3_output_prefix = s3u.s3_bucket_and_key(args.s3_output_path)
      
      logger.info(
          "Running partition {} of {}".format(args.partition_id, args.num_partitions)
      )
      
      # fastq files are either stored directly under the s3 input folder, or in sample sub-folders under the s3 input folder
      if list(s3u.get_files(s3_input_bucket, s3_input_prefix)):
          fastq_key_and_size = [
              (fn, s)
              for fn, s in s3u.get_size(s3_input_bucket, s3_input_prefix)
              if fn.endswith("fastq.gz")
          ]
      else:
          sample_folder_paths = s3u.get_folders(s3_input_bucket, s3_input_prefix + "/")
          fastq_key_and_size = []
          for sample in sample_folder_paths:
              files = [
                  (fn, s)
                  for fn, s in s3u.get_size(s3_input_bucket, s3_input_prefix)
                  if fn.endswith("fastq.gz")
              ]
              fastq_key_and_size += files
      
      sample_name_to_fastq_keys = defaultdict(list)
      fastq_sizes = defaultdict(list)
      fastqs_key_to_name = dict()
      
      for fn, s in fastq_key_and_size:
          matched = False
          if "10x" in technology:
              matched = sample_re_10x.search(os.path.basename(fn))
          elif "smartseq2" in technology:
              matched = sample_re_smartseq2.search(os.path.basename(fn))
          if matched:
              sample_name_to_fastq_keys[matched.group(1)].append(fn)
              fastq_sizes[matched.group(1)].append(s)
              fastqs_key_to_name[fn] = os.path.basename(fn)
      
      logger.info(f"number of samples: {len(sample_name_to_fastq_keys)}")
      
      # download input fastqs from S3 to an EC2 instance
      fastq_dir = run_dir / "fastqs"
      fastq_dir.mkdir(parents=True)
      
      for key in fastqs_key_to_name.keys():
          s3c.download_file(
              Bucket=s3_input_bucket,
              Key=key,
              Filename=str(fastq_dir / fastqs_key_to_name[key]),
          )
      
      # run kallisto alignment and RNA velocity analysis on the valid fastq files
      for sample in sorted(sample_name_to_fastq_keys)[
          args.partition_id :: args.num_partitions
      ]:
          result_path = run_dir / "results"
          result_path.mkdir(parents=True)
      
          command = [
              "loompy",
              "fromfq",
              str(result_path / f"{sample_name}.loom"),
              sample_name,
              str(par["reference_genome"]),
              str(par["metadata"]),
          ]
          fastq_names = [
              fastqs_key_to_name[key] for key in sample_name_to_fastq_keys[sample]
          ]
          fastq_dirs = [str(fastq_dir / fastq) for fastq in fastq_names]
          command += fastq_dirs
          print(command)  # for testing purpose
      
          failed = ut_log.log_command(
              logger,
              command,
              shell=True,
              stdout=subprocess.PIPE,
              stderr=subprocess.STDOUT,
              universal_newlines=True,
          )
      
          t_config = TransferConfig(use_threads=False)
          if failed:
              raise RuntimeError("loompy failed")
          else:
              logger.info(f"Uploading {sample_name}.loom")
              s3c.upload_file(
                  Filename=str(result_path / f"{sample_name}.loom"),
                  Bucket=s3_output_bucket,
                  Key=os.path.join(s3_output_prefix, f"{sample_name}.loom"),
                  Config=t_config,
              )
      
          command = ["rm", "-rf", str(result_path)]
          ut_log.log_command(logger, command, shell=True)
      
          time.sleep(30)
      
      logger.info("Job completed")
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "loompy"
    is_executable: true
  description: "Uknown"
  usage: "python script.py \\\n  --input /path/to/bcl \\\n  --sample_sheet sample_sheet.csv\
    \ \\\n  --output fastqs\n"
  tests: []
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
platform:
  type: "docker"
  id: "docker"
  image: "ghcr.io/data-intuitive/cellranger:6.1"
  target_organization: "czbiohub/utilities"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/czbiohub/utilities"
  setup: []
platforms: []
info:
  config: "src/rna_velocity/loompy/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/rna_velocity/loompy"
  executable: "target/docker/rna_velocity/loompy/loompy"
  viash_version: "0.5.12"
  git_commit: "ce7f2576a32eb986fddc8c8cc03222c1b096612a"
  git_remote: "https://github.com/czbiohub/utilities"
