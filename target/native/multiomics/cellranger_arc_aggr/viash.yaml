functionality:
  name: "cellranger_arc_aggr"
  namespace: "multiomics"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--data"
    alternatives: []
    description: "Path to the data"
    example:
    - "/path/to/data"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--reference_genome"
    alternatives: []
    description: "Path to the reference genome"
    example:
    - "/path/to/reference_genome"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Path to the output directory"
    example:
    - "/path/to/directory"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--run_id"
    alternatives: []
    description: "The run ID"
    example: []
    default: []
    required: true
    values: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--peaks"
    alternatives: []
    description: "Path to the bed file to use for peak calling"
    example:
    - "/path/to/bed"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean"
    name: "--neurips"
    alternatives: []
    description: "Unknown"
    example: []
    default:
    - false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # cellranger_arc_aggr main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.12 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="cellranger_arc_aggr"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "cellranger_arc_aggr main_build"
        echo ""
        echo "Aggregate"
        echo ""
        echo "Usage:"
        echo "cellranger_arc_aggr \\"
        echo "  --input /path/to/bcl \\"
        echo "  --sample_sheet sample_sheet.csv \\"
        echo "  --output fastqs \\"
        echo "  --reports reports"
        echo ""
        echo "Options:"
        echo "    --data"
        echo "        type: file, required parameter"
        echo "        example: /path/to/data"
        echo "        Path to the data"
        echo ""
        echo "    --reference_genome"
        echo "        type: file, required parameter"
        echo "        example: /path/to/reference_genome"
        echo "        Path to the reference genome"
        echo ""
        echo "    --output"
        echo "        type: file, required parameter"
        echo "        example: /path/to/directory"
        echo "        Path to the output directory"
        echo ""
        echo "    --run_id"
        echo "        type: string, required parameter"
        echo "        The run ID"
        echo ""
        echo "    --peaks"
        echo "        type: file"
        echo "        example: /path/to/bed"
        echo "        Path to the bed file to use for peak calling"
        echo ""
        echo "    --neurips"
        echo "        type: boolean"
        echo "        default: false"
        echo "        Unknown"
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "cellranger_arc_aggr main_build"
                  exit
                  ;;
              --data)
                  VIASH_PAR_DATA="$2"
                  shift 2
                  ;;
              --data=*)
                  VIASH_PAR_DATA=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --reference_genome)
                  VIASH_PAR_REFERENCE_GENOME="$2"
                  shift 2
                  ;;
              --reference_genome=*)
                  VIASH_PAR_REFERENCE_GENOME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --run_id)
                  VIASH_PAR_RUN_ID="$2"
                  shift 2
                  ;;
              --run_id=*)
                  VIASH_PAR_RUN_ID=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --peaks)
                  VIASH_PAR_PEAKS="$2"
                  shift 2
                  ;;
              --peaks=*)
                  VIASH_PAR_PEAKS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --neurips)
                  VIASH_PAR_NEURIPS="$2"
                  shift 2
                  ;;
              --neurips=*)
                  VIASH_PAR_NEURIPS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_DATA" ]; then
        ViashError '--data' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        ViashError '--reference_genome' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_RUN_ID" ]; then
        ViashError '--run_id' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_NEURIPS" ]; then
        VIASH_PAR_NEURIPS="false"
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-cellranger_arc_aggr-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      #!/usr/bin/env python
      
      import csv
      import os
      import posixpath
      import subprocess
      
      import scanpy as sc
      import pandas as pd
      import numpy as np
      
      ### VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'data': $( if [ ! -z ${VIASH_PAR_DATA+x} ]; then echo "'${VIASH_PAR_DATA//\'/\\\'}'"; else echo None; fi ),
        'reference_genome': $( if [ ! -z ${VIASH_PAR_REFERENCE_GENOME+x} ]; then echo "'${VIASH_PAR_REFERENCE_GENOME//\'/\\\'}'"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'run_id': $( if [ ! -z ${VIASH_PAR_RUN_ID+x} ]; then echo "'${VIASH_PAR_RUN_ID//\'/\\\'}'"; else echo None; fi ),
        'peaks': $( if [ ! -z ${VIASH_PAR_PEAKS+x} ]; then echo "'${VIASH_PAR_PEAKS//\'/\\\'}'"; else echo None; fi ),
        'neurips': $( if [ ! -z ${VIASH_PAR_NEURIPS+x} ]; then echo "'${VIASH_PAR_NEURIPS//\'/\\\'}'.lower() == 'true'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ### VIASH END
      
      def create_annotated_results(
              feature_matrix_path,
              libraries_csv,
              output_path):
      
          adata = sc.read_10x_h5(feature_matrix_path, gex_only=False)
      
          # Load aggr.csv and make 1-indexed
          aggr = pd.read_csv(libraries_csv)
          aggr.index = pd.Index(np.arange(aggr.shape[0])+1)
      
          # Get site and donor for each GEM well
          sites = {}
          donors = {}
          for ix, lib_id in aggr['library_id'].iteritems():
              *_, site, donor = lib_id.split('_')
              sites[ix] = site
              donors[ix] = donor
      
          # Get GEM well for each cell barcode
          gem_well = [ix.split('-')[1] for ix in adata.obs.index]
      
          # Append site and donor information
          adata.obs['site'] = [sites[int(g_well)] for g_well in gem_well]
          adata.obs['donor'] = [donors[int(g_well)] for g_well in gem_well]
      
          # Write output
          adata.write_h5ad(output_path, compression=9)
      
      run_id = par["run_id"]
      
      data_dir = par["data_dir"]
      
      original_libraries_path = par["data_dir"] / run_id / "original_libraries.csv"
      libraries_path = par["data_dir"] / run_id / "libraries.csv"
      
      
      with open(original_libraries_path) as csvfile, \\
              open(libraries_path, 'w') as new_csv:
          header = next(csvfile)
          new_csv.write(f"{header}")
      
          for row in csv.reader(csvfile):
              library = row[0]
              atac_fragments = row[1]
              atac_fragments_tbi = f"{atac_fragments}.tbi"
              per_barcode_metrics = row[2]
              gex_molecule_info = row[3]
      
              # TODO(neevor): clean up duplicated logic.
              atac_fragments_local_path = data_dir / library / posixpath.basename(atac_fragments)
              atac_fragments_tbi_local_path = data_dir / library / f"{posixpath.basename(atac_fragments)}.tbi"
              per_barcode_metrics_local_path = data_dir / library / posixpath.basename(per_barcode_metrics)
              gex_molecule_info_local_path = data_dir / library / posixpath.basename(gex_molecule_info)
      
              row[1] = str(atac_fragments_local_path)
              row[2] = str(per_barcode_metrics_local_path)
              row[3] = str(gex_molecule_info_local_path)
      
              row_values = ",".join(row)
              new_csv.write(f"{row_values}\\n")
      
      os.chdir(str(par["output"]))
      command = [
          "cellranger-arc", "aggr",
          f"--id={run_id}",
          f"--csv={str(libraries_path)}",
          f"--reference={paths['ref_path']}",
          "--normalize=depth",
          "--localmem=256",
          "--localcores=64",
      ]
      
      if par["peaks"]:
          command.append(f"--peaks={par['peaks']}")
      
      # run cellranger-arc aggr
      with subprocess.Popen(
          command,
          stdout=subprocess.PIPE,
          stderr=subprocess.STDOUT,
      ) as p:
          for line in p.stdout:
              print(line.decode(), end="")
      
      if p.returncode > 0:
          raise RuntimeError(f"cellranger-arc aggr failed with exit code {p.returncode}")
      
      if par["neurips"]:
          create_annotated_results(
              f"{par['output']}/filtered_feature_bc_matrix.h5",
              libraries_path,
              f"{par['output']}/filtered_feature_bc_matrix.annotated.h5ad"
          )
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "cellranger_arc_aggr"
    is_executable: true
  description: "Aggregate"
  usage: "cellranger_arc_aggr \\\n  --input /path/to/bcl \\\n  --sample_sheet sample_sheet.csv\
    \ \\\n  --output fastqs \\\n  --reports reports\n"
  tests: []
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/multiomics/cellranger_arc_aggr/config.vsh.yaml"
  platform: "native"
  output: "target/native/multiomics/cellranger_arc_aggr"
  executable: "target/native/multiomics/cellranger_arc_aggr/cellranger_arc_aggr"
  viash_version: "0.5.12"
  git_commit: "ce7f2576a32eb986fddc8c8cc03222c1b096612a"
  git_remote: "https://github.com/czbiohub/utilities"
