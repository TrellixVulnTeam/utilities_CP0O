#!/usr/bin/env bash

# run_star_and_htseq main_build
# 
# This wrapper script is auto-generated by viash 0.5.11 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# backwards compatibility
VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="run_star_and_htseq"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "run_star_and_htseq main_build"
  echo ""
  echo "Align sequencing data"
  echo ""
  echo "Usage:"
  echo "UNK"
  echo ""
  echo "Options:"
  echo "    --taxon"
  echo "        type: string, required parameter"
  echo "        example: homo"
  echo "        Reference genome for alignment fun"
  echo ""
  echo "    --input"
  echo "        type: file, required parameter"
  echo "        example: path/to/fastqs"
  echo "        Path to the directory containing the fastq.gz files to align"
  echo ""
  echo "    --output"
  echo "        type: file, required parameter, output"
  echo "        Output folder"
  echo ""
  echo "    --star_proc"
  echo "        type: integer"
  echo "        default: 16"
  echo "        Number of processes to give to each STAR run"
  echo ""
  echo "    --num_partitions"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Number of groups to divide samples into"
  echo ""
  echo "    --partition_id"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Index of sample group."
  echo ""
  echo "    --min_size"
  echo "        type: integer"
  echo "        default: 50000"
  echo "        Minimum file syze in bytes for a file to be realigned"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "run_star_and_htseq main_build"
            exit
            ;;
        --taxon)
            VIASH_PAR_TAXON="$2"
            shift 2
            ;;
        --taxon=*)
            VIASH_PAR_TAXON=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --star_proc)
            VIASH_PAR_STAR_PROC="$2"
            shift 2
            ;;
        --star_proc=*)
            VIASH_PAR_STAR_PROC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_partitions)
            VIASH_PAR_NUM_PARTITIONS="$2"
            shift 2
            ;;
        --num_partitions=*)
            VIASH_PAR_NUM_PARTITIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --partition_id)
            VIASH_PAR_PARTITION_ID="$2"
            shift 2
            ;;
        --partition_id=*)
            VIASH_PAR_PARTITION_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_size)
            VIASH_PAR_MIN_SIZE="$2"
            shift 2
            ;;
        --min_size=*)
            VIASH_PAR_MIN_SIZE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_TAXON" ]; then
  ViashError '--taxon' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_STAR_PROC" ]; then
  VIASH_PAR_STAR_PROC="16"
fi
if [ -z "$VIASH_PAR_NUM_PARTITIONS" ]; then
  VIASH_PAR_NUM_PARTITIONS="10"
fi
if [ -z "$VIASH_PAR_PARTITION_ID" ]; then
  VIASH_PAR_PARTITION_ID="0"
fi
if [ -z "$VIASH_PAR_MIN_SIZE" ]; then
  VIASH_PAR_MIN_SIZE="50000"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-run_star_and_htseq-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
#!/usr/bin/env python

import datetime
import os
import re
import subprocess
import time

from collections import defaultdict

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'taxon': $( if [ ! -z ${VIASH_PAR_TAXON+x} ]; then echo "'${VIASH_PAR_TAXON//\'/\\\'}'"; else echo None; fi ),
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
  'star_proc': $( if [ ! -z ${VIASH_PAR_STAR_PROC+x} ]; then echo "int('${VIASH_PAR_STAR_PROC//\'/\\\'}')"; else echo None; fi ),
  'num_partitions': $( if [ ! -z ${VIASH_PAR_NUM_PARTITIONS+x} ]; then echo "int('${VIASH_PAR_NUM_PARTITIONS//\'/\\\'}')"; else echo None; fi ),
  'partition_id': $( if [ ! -z ${VIASH_PAR_PARTITION_ID+x} ]; then echo "int('${VIASH_PAR_PARTITION_ID//\'/\\\'}')"; else echo None; fi ),
  'min_size': $( if [ ! -z ${VIASH_PAR_MIN_SIZE+x} ]; then echo "int('${VIASH_PAR_MIN_SIZE//\'/\\\'}')"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_META_RESOURCES_DIR',
  'temp_dir': '$VIASH_TEMP'
}

resources_dir = '$VIASH_META_RESOURCES_DIR'

## VIASH END

# valid and deprecated reference genomes
reference_genomes = {
    "homo": "HG38-PLUS",
    "hg38-plus": "HG38-PLUS",
    "homo.gencode.v30.ERCC.chrM": "homo.gencode.v30.annotation.ERCC92",
    "mus": "MM10-PLUS",
    "mm10-plus": "MM10-PLUS",
    "microcebus": "MicMur3-PLUS",
    "gencode.vM19": "gencode.vM19",
    "gencode.vM19.ERCC": "gencode.vM19.ERCC.SP1",
    "zebrafish-plus": "danio_rerio_plus_STAR2.6.1d",
    "homo.gencode.v30-plus-HAV18": "gencode.v30.annotation.ERCC92.HAV_18f_KP879216",
    "gencode_mouse_MTB": "gencode_mouse_MTB"
}
deprecated = {"homo": "hg38-plus", "mus": "mm10-plus"}

# other helpful constants
STAR = "STAR"
HTSEQ = "htseq-count"
SAMTOOLS = "samtools"

COMMON_PARS = [
    STAR,
    "--outFilterType", "BySJout",
    "--outFilterMultimapNmax", "20",
    "--alignSJoverhangMin", "8",
    "--alignSJDBoverhangMin", "1",
    "--outFilterMismatchNmax", "999",
    "--outFilterMismatchNoverLmax", "0.04",
    "--alignIntronMin", "20",
    "--alignIntronMax", "1000000",
    "--alignMatesGapMax", "1000000",
    "--outSAMstrandField", "intronMotif",
    "--outSAMtype", "BAM", "Unsorted", 
    "--outSAMattributes", "NH", "HI", "NM", "MD",
    "--genomeLoad", "LoadAndKeep",
    "--outReadsUnmapped", "Fastx",
    "--readFilesCommand", "zcat",
]

CURR_MIN_VER = datetime.datetime(2017, 3, 1, tzinfo=datetime.timezone.utc)

def run_sample(
    input, sample_name, sample_fns, genome_dir, output, star_proc
):
    """ Run alignment jobs with STAR.

        s3_input_bucket - Input fastq files to align
        sample_name - Sequenced sample name (joined by "_")
        sample_fns - Sample file names. Each file name is concatenated by sample_name,
                     "_R1_" or"_R2_", a number, and ".fastq.gz"
        genome_dir - Path to reference genome
        run_dir - Path to output dir
        star_proc - Number of processes to give to each STAR run

        Return two values. FAILED is a boolean value of whether the alignment run
        fails. DEST_DIR is the path under which STAR alignment results are stored.
    """
    failed = False

    dest_dir = os.path.join(output, sample_name)

    if not os.path.exists(dest_dir):
        os.makedirs(dest_dir)
        os.mkdir(os.path.join(dest_dir, "rawdata"))
        os.mkdir(os.path.join(dest_dir, "results"))
        os.mkdir(os.path.join(dest_dir, "results", "Pass1"))

    # start running STAR
    # getting input files first
    reads = sorted(
        os.path.join(dest_dir, os.path.basename(sample_fn)) for sample_fn in sample_fns
    )

    input_command = COMMON_PARS[:]
    input_command.extend(
        (
            "--runThreadN", str(star_proc),
            "--genomeDir", genome_dir,
            "--readFilesIn",
            " ".join(reads),
        )
    )
    # run STAR
    with subprocess.Popen(
        input_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    ) as p:
        for line in p.stdout:
            print(line.decode(), end="")

    if p.returncode > 0:
        print(f"STAR failed with exit code {p.returncode}")
        failed = True

    # run samtools sort
    sample_command = [
        SAMTOOLS,
        "sort",
        "-m", "6000000000",
        "-o",
        "./Pass1/Aligned.out.sorted.bam",
        "./Pass1/Aligned.out.bam",
    ]
    with subprocess.Popen(
        sample_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=os.path.join(dest_dir, "results"),
    ) as p:
        for line in p.stdout:
            print(line.decode(), end="")

    if p.returncode > 0:
        print(f"samtools sort failed with exit code {p.returncode}")
        failed = True

    # run samtools index
    sample_index_command = [SAMTOOLS, "index", "-b", "Aligned.out.sorted.bam"]
    with subprocess.Popen(
        sample_index_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=os.path.join(dest_dir, "results", "Pass1"),
    ) as p:
        for line in p.stdout:
            print(line.decode(), end="")

    if p.returncode > 0:
        print(f"samtools index failed with exit code {p.returncode}")
        failed = True

    # generating files for htseq-count
    # run samtools output
    output_command = [
        SAMTOOLS,
        "sort",
        "-m", "6000000000",
        "-n",
        "-o",
        "./Pass1/Aligned.out.sorted-byname.bam",
        "./Pass1/Aligned.out.sorted.bam",
    ]    
    with subprocess.Popen(
        output_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=os.path.join(dest_dir, "results"),
    ) as p:
        for line in p.stdout:
            print(line.decode(), end="")

    if p.returncode > 0:
        print(f"samtools output failed with exit code {p.returncode}")
        failed = True

    return failed, dest_dir


def run_htseq(dest_dir, sjdb_gtf, id_attr):
    """ Run alignment job with htseq.

        dest_dir - Path local to the machine  under which alignment results
                   are stored. Child path of run_dir/sample_name
        sjdb_gtf - Path of reference genome .gtf files used to detect splice junctions
        id_attr - Determine naming format in the count file for different genomes

        Return FAILED, a boolean value of whether the alignment run fails
    """
    failed = False
    htseq_command = [
        HTSEQ,
        "-r", "name",
        "-s", "no",
        "-f", "bam",
        f"--idattr={id_attr}",
        "-m", "intersection-nonempty",
        os.path.join(dest_dir, "results", "Pass1", "Aligned.out.sorted-byname.bam"),
        sjdb_gtf,
        ">",
        "htseq-count.txt",
    ]
    with subprocess.Popen(
        htseq_command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        cwd=os.path.join(dest_dir, "results"),
    ) as p:
        for line in p.stdout:
            print(line.decode(), end="")

    if p.returncode > 0:
        print(f"htseq_command output failed with exit code {p.returncode}")
        failed = True

    return failed


""" Download reference genome, run alignment jobs, and upload results to S3.

    logger - Logger object that exposes the interface the code directly uses
"""
run_dir = os.path.join(par["output"])
os.makedirs(run_dir)

genome_name = reference_genomes[par["taxon"]]
if par["taxon"] == "gencode.vM19" or par["taxon"] == "gencode.vM19.ERCC":
    id_attr = "gene_name"
else:
    id_attr = "gene_id"
sjdb_gtf = par["reference_genome"] + f"/{genome_name}.gtf"

# Load Genome Into Memory
command = [STAR, "--genomeDir", par["reference_genome"], "--genomeLoad", "LoadAndExit"]
with subprocess.Popen(
    command,
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT,
) as p:
    for line in p.stdout:
        print(line.decode(), end="")
print("Loaded reference genome into memory")

sample_re = re.compile("([^/]+)_R\\d(?:_\\d+)?.fastq.gz\$")

output = []

output_files = {
    tuple(os.path.basename(fn).rsplit(".", 2)[0].split(".", 1)[:2])
    for dt, fn in output
    if fn.endswith(".htseq-count.txt") and dt > CURR_MIN_VER
}

sample_files = [
    (fn, os.path.getsize(fn))
    for fn in os.scandir(par["input"])
    if fn.endswith("fastq.gz")
]

sample_lists = defaultdict(list)
sample_sizes = defaultdict(list)

for fn, s in sample_files:
    matched = sample_re.search(os.path.basename(fn))
    if matched:
        sample_lists[matched.group(1)].append(fn)
        sample_sizes[matched.group(1)].append(s)

print(f"number of samples: {len(sample_lists)}")

for sample_name in sorted(sample_lists)[par["partition_id"] :: par["num_partitions"]]:
    if (sample_name, par["taxon"]) in output_files:
        continue

    if sum(sample_sizes[sample_name]) < par["min_size"]:
        continue

    failed, dest_dir = run_sample(
        par["input"],
        sample_name,
        sorted(sample_lists[sample_name]),
        par["reference_genome"],
        run_dir,
        par["star_proc"],
    )

    failed = failed or run_htseq(dest_dir, sjdb_gtf, id_attr)

    time.sleep(30)
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
