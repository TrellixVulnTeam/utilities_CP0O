functionality:
  name: "bcl2fastq"
  namespace: "demux"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Path to the untarred BCL files."
    example:
    - "/path/to/bcl"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--sample_sheet"
    alternatives: []
    description: "The path to the sample sheet."
    example:
    - "SampleSheet.csv"
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The folder to store the demux results"
    example:
    - "/path/to/output"
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--star_structure"
    alternatives: []
    description: "Group the fastq files into folders based on sample name"
    direction: "input"
  - type: "boolean_true"
    name: "--skip_undetermined"
    alternatives: []
    description: "Don't upload the Undetermined files (can save time)"
    direction: "input"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # bcl2fastq main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.12 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="bcl2fastq"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "bcl2fastq main_build"
        echo ""
        echo "Demultiplex raw sequencing data"
        echo ""
        echo "Usage:"
        echo "bcl2fastq \\"
        echo "  --input /path/to/bcl \\"
        echo "  --sample_sheet sample_sheet.csv \\"
        echo "  --output fastqs"
        echo ""
        echo "Options:"
        echo "    --input"
        echo "        type: file, required parameter"
        echo "        example: /path/to/bcl"
        echo "        Path to the untarred BCL files."
        echo ""
        echo "    --sample_sheet"
        echo "        type: file"
        echo "        example: SampleSheet.csv"
        echo "        The path to the sample sheet."
        echo ""
        echo "    --output"
        echo "        type: file, required parameter, output"
        echo "        example: /path/to/output"
        echo "        The folder to store the demux results"
        echo ""
        echo "    --star_structure"
        echo "        type: boolean_true"
        echo "        Group the fastq files into folders based on sample name"
        echo ""
        echo "    --skip_undetermined"
        echo "        type: boolean_true"
        echo "        Don't upload the Undetermined files (can save time)"
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "bcl2fastq main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --sample_sheet)
                  VIASH_PAR_SAMPLE_SHEET="$2"
                  shift 2
                  ;;
              --sample_sheet=*)
                  VIASH_PAR_SAMPLE_SHEET=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --star_structure)
                  VIASH_PAR_STAR_STRUCTURE=true
                  shift 1
                  ;;
              --skip_undetermined)
                  VIASH_PAR_SKIP_UNDETERMINED=true
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_STAR_STRUCTURE" ]; then
        VIASH_PAR_STAR_STRUCTURE="false"
      fi
      if [ -z "$VIASH_PAR_SKIP_UNDETERMINED" ]; then
        VIASH_PAR_SKIP_UNDETERMINED="false"
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-bcl2fastq-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      import sys
      import glob
      import os
      import re
      import subprocess
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
        'sample_sheet': $( if [ ! -z ${VIASH_PAR_SAMPLE_SHEET+x} ]; then echo "'${VIASH_PAR_SAMPLE_SHEET//\'/\\\'}'"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'star_structure': $( if [ ! -z ${VIASH_PAR_STAR_STRUCTURE+x} ]; then echo "'${VIASH_PAR_STAR_STRUCTURE//\'/\\\'}'.lower() == 'true'"; else echo None; fi ),
        'skip_undetermined': $( if [ ! -z ${VIASH_PAR_SKIP_UNDETERMINED+x} ]; then echo "'${VIASH_PAR_SKIP_UNDETERMINED//\'/\\\'}'.lower() == 'true'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ## VIASH END
      
      if not os.path.isdir(par["output"]):
          print(f"creating output directory {par['output']}")
          os.makedirs(par["output"])
      
      # construct command args
      # hard-code path to bcl2fastq for now; change to
      # 'bcl2fastq' when viash is updated to viash 0.5.8
      command = [
          "bcl2fastq",
          "--runfolder-dir", par["input"],
          "--output-dir", par["output"],
      ]
      if par["sample_sheet"] is not None:
          command = command + [ "--sample-sheet", par["sample_sheet"] ]
      
      # run bcl2fastq
      with subprocess.Popen(
          command,
          stdout=subprocess.PIPE,
          stderr=subprocess.STDOUT,
      ) as p:
          for line in p.stdout:
              print(line.decode(), end="")
      
      if p.returncode > 0:
          raise RuntimeError(f"bcl2fastq failed with exit code {p.returncode}")
      
      # Fix directory structure of the files
      fastqgz_files = glob.glob(os.path.join(par['output'], "*fastq.gz"))
      print("found fastq.gz files:")
      print("\\n".join(fastqgz_files))
      
      for fastq_file in fastqgz_files:
          fq_basename = os.path.basename(fastq_file)
      
          if par["skip_undetermined"] and fq_basename.startswith("Undetermined"):
              print(f"removing {fq_basename}")
              os.remove(fastq_file)
          elif par["star_structure"]:
              m = re.match("(.+)(_R[12]_001.fastq.gz)", fq_basename)
              if m:
                  sample = m.group(1)
                  sample_dir = os.path.join(par['output'], sample)
                  if not os.path.exists(sample_dir):
                      print(f"creating {sample_dir}")
                      os.mkdir(sample_dir)
                  print(f"moving {fastq_file}")
                  os.rename(
                      fastq_file,
                      os.path.join(sample_dir, fq_basename),
                  )
              else:
                  print(f"Warning: regex didn't match {fastq_file}")
      
      print("demux/bcl2fastq run completed.")
      sys.stdout.flush()
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "bcl2fastq"
    is_executable: true
  description: "Demultiplex raw sequencing data"
  usage: "bcl2fastq \\\n  --input /path/to/bcl \\\n  --sample_sheet sample_sheet.csv\
    \ \\\n  --output fastqs\n"
  tests:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/bs_195891710"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/demux/bcl2fastq/config.vsh.yaml"
  platform: "native"
  output: "target/native/demux/bcl2fastq"
  executable: "target/native/demux/bcl2fastq/bcl2fastq"
  viash_version: "0.5.12"
  git_commit: "8e50dd6da1ffe06047b5e7c3279ba0ccdac5c0af"
  git_remote: "https://github.com/czbiohub/utilities"
