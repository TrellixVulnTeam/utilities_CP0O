#!/usr/bin/env bash

#####################################
#    cellranger_count main_build    #
#####################################

# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="cellranger_count"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "cellranger_count main_build"
  echo "Run alignment jobs using 10x"
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter"
  echo "        The folder with fastq.gz files to align."
  echo ""


  echo "   --reference"
  echo "        type: file, required parameter"
  echo "        The path to reference tar.gz file."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        default: counts"
  echo "        example: /path/to/output"
  echo "        The folder to store the alignment results."
  echo ""


  echo "   --expect_cells"
  echo "        type: integer"
  echo "        default: 3000"
  echo "        Expected number of recovered cells, used as input to cell calling algorithm."
  echo ""


  echo "   --chemistry"
  echo "        type: string"
  echo "        default: auto"
  echo "        Assay configuration. Options are: auto, threeprime, fiveprime, SC3Pv1, SC3Pv2, SC3Pv3, SC3Pv3LT, SC3Pv3HT, SC5P-PE, SC5P-R2. See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information."
  echo ""


  echo "   --cores"
  echo "        type: integer"
  echo "        Set max cores the pipeline may request at one time."
  echo ""


  echo "   --memory"
  echo "        type: integer"
  echo "        Set max GB the pipeline may request at one time."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "cellranger_count main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference)
            VIASH_PAR_REFERENCE="$2"
            shift 2
            ;;
        --reference=*)
            VIASH_PAR_REFERENCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --expect_cells)
            VIASH_PAR_EXPECT_CELLS="$2"
            shift 2
            ;;
        --expect_cells=*)
            VIASH_PAR_EXPECT_CELLS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --chemistry)
            VIASH_PAR_CHEMISTRY="$2"
            shift 2
            ;;
        --chemistry=*)
            VIASH_PAR_CHEMISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cores)
            VIASH_PAR_CORES="$2"
            shift 2
            ;;
        --cores=*)
            VIASH_PAR_CORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --memory)
            VIASH_PAR_MEMORY="$2"
            shift 2
            ;;
        --memory=*)
            VIASH_PAR_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_REFERENCE" ]; then
  ViashError '--reference' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_EXPECT_CELLS" ]; then
  VIASH_PAR_EXPECT_CELLS="3000"
fi
if [ -z "$VIASH_PAR_CHEMISTRY" ]; then
  VIASH_PAR_CHEMISTRY="auto"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-cellranger_count-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
#!/bin/bash

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='$VIASH_PAR_INPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_REFERENCE+x} ]; then echo "par_reference='$VIASH_PAR_REFERENCE'"; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='$VIASH_PAR_OUTPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_EXPECT_CELLS+x} ]; then echo "par_expect_cells='$VIASH_PAR_EXPECT_CELLS'"; fi )
$( if [ ! -z ${VIASH_PAR_CHEMISTRY+x} ]; then echo "par_chemistry='$VIASH_PAR_CHEMISTRY'"; fi )
$( if [ ! -z ${VIASH_PAR_CORES+x} ]; then echo "par_cores='$VIASH_PAR_CORES'"; fi )
$( if [ ! -z ${VIASH_PAR_MEMORY+x} ]; then echo "par_memory='$VIASH_PAR_MEMORY'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END


# create temporary directory
tmpdir=\$(mktemp -d "$VIASH_TEMP/\$meta_resources_name-XXXXXXXX")
function clean_up {
    rm -rf "\$tmpdir"
}
trap clean_up EXIT


# add additional params
extra_params=( )

if [ ! -z "\$par_cores" ]; then 
  extra_params+=( "--localcores" "\$par_cores" )
fi
if [ ! -z "\$par_memory" ]; then 
  extra_params+=( "--localmem" "\$par_memory" )
fi
if [ ! -z "\$par_expect_cells" ]; then 
  extra_params+=( "--expect-cells" "\$par_expect_cells" )
fi
if [ ! -z "\$par_chemistry" ]; then 
  extra_params+=( "--chemistry" "\$par_chemistry" )
fi

echo "Running cellranger count"

id=myoutput
cellranger count \\
  --id "\$id" \\
  --fastqs "\$par_input" \\
  --transcriptome "\$par_reference" \\
  "\${extra_params[@]}" \\
  --disable-ui \\
  --nosecondary

echo "Copying output"
if [ -d "\$id/outs/" ]; then
  if [ ! -d "\$par_output" ]; then
    mkdir -p "\$par_output"
  fi
  mv "\$id/outs/"* "\$par_output"
fi
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
