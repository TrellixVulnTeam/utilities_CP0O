  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    cellranger_count__input = "viash_no_value"
    cellranger_count__transcriptome = "viash_no_value"
    cellranger_count__output = "viash_no_value"
    cellranger_count__expect_cells = "3000"
    cellranger_count__chemistry = "auto"
    cellranger_count__cores = "no_default_value_configured"
    cellranger_count__memory = "no_default_value_configured"
    id = ""
    testScript = "test.py"
    testResources = [ "test.py", "../../../resources_test/pbmc_1k_protein_v3", "../../../resources_test/reference/refdata-gex-GRCh38-2020-A" ]
    cellranger_count {
      name = "cellranger_count"
      container = "alignment_cellranger_count"
      containerTag = "main_build"
      containerRegistry = "ghcr.io"
      containerOrganization = "czbiohub/utilities"
      command = "cellranger_count"
      tests {
        isDefined = true
        testScript = "test.py"
        testResources = [ "test.py", "../../../resources_test/pbmc_1k_protein_v3", "../../../resources_test/reference/refdata-gex-GRCh38-2020-A" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__input}"
          description = "The folder with fastq.gz files to align."
        }
        transcriptome {
          name = "transcriptome"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__transcriptome}"
          description = "The path to reference tar.gz file."
        }
        output {
          name = "output"
          otype = "--"
          required = true
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__output}"
          dflt = "counts"
          example = "/path/to/output"
          description = "The folder to store the alignment results."
        }
        expect_cells {
          name = "expect_cells"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__expect_cells}"
          dflt = "3000"
          description = "Expected number of recovered cells, used as input to cell calling algorithm."
        }
        chemistry {
          name = "chemistry"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__chemistry}"
          dflt = "auto"
          description = "Assay configuration. Options are: auto, threeprime, fiveprime, SC3Pv1, SC3Pv2, SC3Pv3, SC3Pv3LT, SC3Pv3HT, SC5P-PE, SC5P-R2. See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\n"
        }
        cores {
          name = "cores"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__cores}"
          description = "Set max cores the pipeline may request at one time."
        }
        memory {
          name = "memory"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.cellranger_count__memory}"
          description = "Set max GB the pipeline may request at one time."
        }
      }
    }
  }