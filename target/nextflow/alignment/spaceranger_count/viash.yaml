functionality:
  name: "spaceranger_count"
  namespace: "alignment"
  version: "main_build"
  authors: []
  arguments:
  - type: "file"
    name: "--input_fastqs"
    alternatives: []
    description: "Path to the fastq files."
    example: "/path/to/bcl"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--input_tif"
    alternatives: []
    description: "Path to the tif file"
    example: "path/to/tif"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--reference_genome"
    alternatives: []
    description: "Path to the reference genome"
    example: "path/to/ref_genome"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "The name of the folder to store the results in"
    default: "outs"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--id"
    alternatives: []
    description: "ID name for temporary output directory."
    default: "output"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--sample"
    alternatives: []
    description: "Sample name to analyze."
    example: "test_sample"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--lanes"
    alternatives: []
    description: "Lanes associated with this sample."
    example: 1
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--slide"
    alternatives: []
    description: "Slide associated with this sample."
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ######################################
      #    spaceranger_count main_build    #
      ######################################
      
      # This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
      # derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
      # Data Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="spaceranger_count"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "spaceranger_count main_build"
        echo "Align fastqs and detect tissues"
        echo
        echo -n "Usage: "
        echo "spaceranger count --input /path/to/bcl --sample \\"
        echo "  test_sample --id 13423 --lanes 1"
        echo
        echo "Options:"
      
        echo "   --input_fastqs"
        echo "        type: file, required parameter"
        echo "        example: /path/to/bcl"
        echo "        Path to the fastq files."
        echo ""
      
      
        echo "   --input_tif"
        echo "        type: file, required parameter"
        echo "        example: path/to/tif"
        echo "        Path to the tif file"
        echo ""
      
      
        echo "   --reference_genome"
        echo "        type: file, required parameter"
        echo "        example: path/to/ref_genome"
        echo "        Path to the reference genome"
        echo ""
      
      
        echo "   --output"
        echo "        type: file, required parameter, output"
        echo "        default: outs"
        echo "        The name of the folder to store the results in"
        echo ""
      
      
        echo "   --id"
        echo "        type: string"
        echo "        default: output"
        echo "        ID name for temporary output directory."
        echo ""
      
      
        echo "   --sample"
        echo "        type: string"
        echo "        example: test_sample"
        echo "        Sample name to analyze."
        echo ""
      
      
        echo "   --lanes"
        echo "        type: integer"
        echo "        example: 1"
        echo "        Lanes associated with this sample."
        echo ""
      
      
        echo "   --slide"
        echo "        type: string"
        echo "        Slide associated with this sample."
        echo ""
      
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "spaceranger_count main_build"
                  exit
                  ;;
              --input_fastqs)
                  VIASH_PAR_INPUT_FASTQS="$2"
                  shift 2
                  ;;
              --input_fastqs=*)
                  VIASH_PAR_INPUT_FASTQS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --input_tif)
                  VIASH_PAR_INPUT_TIF="$2"
                  shift 2
                  ;;
              --input_tif=*)
                  VIASH_PAR_INPUT_TIF=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --reference_genome)
                  VIASH_PAR_REFERENCE_GENOME="$2"
                  shift 2
                  ;;
              --reference_genome=*)
                  VIASH_PAR_REFERENCE_GENOME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --id)
                  VIASH_PAR_ID="$2"
                  shift 2
                  ;;
              --id=*)
                  VIASH_PAR_ID=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --sample)
                  VIASH_PAR_SAMPLE="$2"
                  shift 2
                  ;;
              --sample=*)
                  VIASH_PAR_SAMPLE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --lanes)
                  VIASH_PAR_LANES="$2"
                  shift 2
                  ;;
              --lanes=*)
                  VIASH_PAR_LANES=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --slide)
                  VIASH_PAR_SLIDE="$2"
                  shift 2
                  ;;
              --slide=*)
                  VIASH_PAR_SLIDE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT_FASTQS" ]; then
        ViashError '--input_fastqs' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_INPUT_TIF" ]; then
        ViashError '--input_tif' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        ViashError '--reference_genome' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_ID" ]; then
        VIASH_PAR_ID="output"
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-spaceranger_count-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      import subprocess
      import os
      import shutil
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input_fastqs': $( if [ ! -z ${VIASH_PAR_INPUT_FASTQS+x} ]; then echo "'$VIASH_PAR_INPUT_FASTQS'"; else echo None; fi ),
        'input_tif': $( if [ ! -z ${VIASH_PAR_INPUT_TIF+x} ]; then echo "'$VIASH_PAR_INPUT_TIF'"; else echo None; fi ),
        'reference_genome': $( if [ ! -z ${VIASH_PAR_REFERENCE_GENOME+x} ]; then echo "'$VIASH_PAR_REFERENCE_GENOME'"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
        'id': $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "'$VIASH_PAR_ID'"; else echo None; fi ),
        'sample': $( if [ ! -z ${VIASH_PAR_SAMPLE+x} ]; then echo "'$VIASH_PAR_SAMPLE'"; else echo None; fi ),
        'lanes': $( if [ ! -z ${VIASH_PAR_LANES+x} ]; then echo "int('$VIASH_PAR_LANES')"; else echo None; fi ),
        'slide': $( if [ ! -z ${VIASH_PAR_SLIDE+x} ]; then echo "'$VIASH_PAR_SLIDE'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_RESOURCES_DIR'
      }
      
      resources_dir = '$VIASH_RESOURCES_DIR'
      
      ## VIASH END
      
      command = [
            "spaceranger", "count",
            "--fastqs", par["input_fastqs"],
            "--image", par["input_tif"],
            "--id", par["id"],
            "--transcriptome", par["reference_genome"],
      ]
      
      if par["sample"] is not None:
            command = command + ["--sample", par["sample"]]
      
      if par["lanes"] is not None:
            command = command + ["--lanes", par["lanes"]]
      if par["slide"] is not None:
          command = command + ["--slide", par["slide"]]
      else:
          command = command + ["--unknown-slide"]
      
      # run bcl2fastq
      with subprocess.Popen(
          command,
          stdout=subprocess.PIPE,
          stderr=subprocess.STDOUT,
      ) as p:
          for line in p.stdout:
              print(line.decode(), end="", flush=True)
      
      if p.returncode > 0:
          raise RuntimeError(f"spaceranger count failed with exit code {p.returncode}")
      
      if os.path.exists(f"\${par['id']}/outs/"):
          os.makedirs(par["output"])
          shutil.move(f"\${par['id']}/outs/", par["output"])
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "spaceranger_count"
    is_executable: true
  - type: "file"
    text: |
        docker.enabled = true
        def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
        docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
        process.container = "dataintuitive/viash"
        params {
          spaceranger_count__input_fastqs = "viash_no_value"
          spaceranger_count__input_tif = "viash_no_value"
          spaceranger_count__reference_genome = "viash_no_value"
          spaceranger_count__output = "viash_no_value"
          spaceranger_count__id = "output"
          spaceranger_count__sample = "no_default_value_configured"
          spaceranger_count__lanes = "no_default_value_configured"
          spaceranger_count__slide = "no_default_value_configured"
          id = ""
          testScript = "test.py"
          testResources = [ "test.py", "../../../test_resources" ]
          spaceranger_count {
            name = "spaceranger_count"
            container = "alignment_spaceranger_count"
            containerTag = "main_build"
            containerRegistry = "ghcr.io"
            containerOrganization = "czbiohub/utilities"
            command = "spaceranger_count"
            tests {
              isDefined = true
              testScript = "test.py"
              testResources = [ "test.py", "../../../test_resources" ]
            }
            arguments {
              input_fastqs {
                name = "input_fastqs"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__input_fastqs}"
                example = "/path/to/bcl"
                description = "Path to the fastq files."
              }
              input_tif {
                name = "input_tif"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__input_tif}"
                example = "path/to/tif"
                description = "Path to the tif file"
              }
              reference_genome {
                name = "reference_genome"
                otype = "--"
                required = true
                type = "file"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__reference_genome}"
                example = "path/to/ref_genome"
                description = "Path to the reference genome"
              }
              output {
                name = "output"
                otype = "--"
                required = true
                type = "file"
                direction = "Output"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__output}"
                dflt = "outs"
                description = "The name of the folder to store the results in"
              }
              id {
                name = "id"
                otype = "--"
                required = false
                type = "string"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__id}"
                dflt = "output"
                description = "ID name for temporary output directory."
              }
              sample {
                name = "sample"
                otype = "--"
                required = false
                type = "string"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__sample}"
                example = "test_sample"
                description = "Sample name to analyze."
              }
              lanes {
                name = "lanes"
                otype = "--"
                required = false
                type = "integer"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__lanes}"
                example = "1"
                description = "Lanes associated with this sample."
              }
              slide {
                name = "slide"
                otype = "--"
                required = false
                type = "string"
                direction = "Input"
                multiple = false
                multiple_sep = ":"
                value = "${params.spaceranger_count__slide}"
                description = "Slide associated with this sample."
              }
            }
          }
        }

    dest: "nextflow.config"
  - type: "file"
    text: |
      nextflow.enable.dsl=2
      
      params.test = false
      params.debug = false
      params.publishDir = "./"
      
      // A function to verify (at runtime) if all required arguments are effectively provided.
      def checkParams(_params) {
        _params.arguments.collect{
          if (it.value == "viash_no_value") {
            println("[ERROR] option --${it.name} not specified in component spaceranger_count")
            println("exiting now...")
              exit 1
          }
        }
      }
      
      
      def escape(str) {
        return str.replaceAll('\\\\', '\\\\\\\\').replaceAll("\"", "\\\\\"").replaceAll("\n", "\\\\n").replaceAll("`", "\\\\`")
      }
      
      def renderArg(it) {
        if (it.otype == "") {
          return "'" + escape(it.value) + "'"
        } else if (it.type == "boolean_true") {
          if (it.value.toLowerCase() == "true") {
            return it.otype + it.name
          } else {
            return ""
          }
        } else if (it.type == "boolean_false") {
          if (it.value.toLowerCase() == "true") {
            return ""
          } else {
            return it.otype + it.name
          }
        } else if (it.value == "no_default_value_configured") {
          return ""
        } else {
          def retVal = it.value in List && it.multiple ? it.value.join(it.multiple_sep): it.value
          return it.otype + it.name + " '" + escape(retVal) + "'"
        }
      }
      
      def renderCLI(command, arguments) {
        def argumentsList = arguments.collect{renderArg(it)}.findAll{it != ""}
      
        def command_line = command + argumentsList
      
        return command_line.join(" ")
      }
      
      def effectiveContainer(processParams) {
        def _organization = params.containsKey("containerOrganization") ? params.containerOrganization : processParams.containerOrganization
        def _registry = params.containsKey("containerRegistry") ? params.containerRegistry : processParams.containerRegistry
        def _name = processParams.container
        def _tag = params.containsKey("containerTag") ? params.containerTag : processParams.containerTag
      
        return (_registry == "" ? "" : _registry + "/") + (_organization == "" ? "" : _organization + "/") + _name + ":" + _tag
      }
      
      // Convert the nextflow.config arguments list to a List instead of a LinkedHashMap
      // The rest of this main.nf script uses the Map form
      def argumentsAsList(_params) {
        def overrideArgs = _params.arguments.collect{ key, value -> value }
        def newParams = _params + [ "arguments" : overrideArgs ]
        return newParams
      }
      
      
      // Use the params map, create a hashmap of the filenames for output
      // output filename is <sample>.<method>.<arg_name>[.extension]
      def outFromIn(_params) {
      
        def id = _params.id
      
        _params
          .arguments
          .findAll{ it -> it.type == "file" && it.direction == "Output" }
          .collect{ it ->
            // If an 'example' attribute is present, strip the extension from the filename,
            // If a 'dflt' attribute is present, strip the extension from the filename,
            // Otherwise just use the option name as an extension.
            def extOrName =
              (it.example != null)
                ? it.example.split(/\./).last()
                : (it.dflt != null)
                  ? it.dflt.split(/\./).last()
                  : it.name
            // The output filename is <sample> . <modulename> . <extension>
            // Unless the output argument is explicitly specified on the CLI
            def newValue =
              (it.value == "viash_no_value")
                ? "spaceranger_count." + it.name + "." + extOrName
                : it.value
            def newName =
              (id != "")
                ? id + "." + newValue
                : it.name + newValue
            it + [ value : newName ]
          }
      
      }
      
      // A process that filters out output from the output Map
      process filterOutput {
      
        input:
          tuple val(id), val(input), val(_params)
        output:
          tuple val(id), val(output), val(_params)
        when:
          input.keySet().contains("output")
        exec:
          output = input["output"]
      
      }
      
      def overrideIO(_params, inputs, outputs) {
      
        // `inputs` in fact can be one of:
        // - `String`,
        // - `List[String]`,
        // - `Map[String, String | List[String]]`
        // Please refer to the docs for more info
        def overrideArgs = _params.arguments.collect{ it ->
          if (it.type == "file") {
            if (it.direction == "Input") {
              (inputs in List || inputs in HashMap)
                ? (inputs in List)
                  ? it + [ "value" : inputs.join(it.multiple_sep)]
                  : (inputs[it.name] != null)
                    ? (inputs[it.name] in List)
                      ? it + [ "value" : inputs[it.name].join(it.multiple_sep)]
                      : it + [ "value" : inputs[it.name]]
                    : it
                : it + [ "value" : inputs ]
            } else {
              (outputs in List || outputs in HashMap)
                ? (outputs in List)
                  ? it + [ "value" : outputs.join(it.multiple_sep)]
                  : (outputs[it.name] != null)
                    ? (outputs[it.name] in List)
                      ? it + [ "value" : outputs[it.name].join(it.multiple_sep)]
                      : it + [ "value" : outputs[it.name]]
                    : it
                : it + [ "value" : outputs ]
            }
          } else {
            it
          }
        }
      
        def newParams = _params + [ "arguments" : overrideArgs ]
      
        return newParams
      
      }
      
      process spaceranger_count_process {
        tag "${id}"
        echo { (params.debug == true) ? true : false }
        stageInMode "symlink"
        container "${container}"
        publishDir "${params.publishDir}/${id}/", mode: 'copy', overwrite: true, enabled: !params.test
        input:
          tuple val(id), path(input), val(output), val(container), val(cli), val(_params)
        output:
          tuple val("${id}"), path(output), val(_params)
        stub:
          """
          # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
          export PATH="${moduleDir}:\$PATH"
          STUB=1 $cli
          """
        script:
          def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
          if (params.test)
            """
            # Some useful stuff
            export NUMBA_CACHE_DIR=/tmp/numba-cache
            # Running the pre-hook when necessary
            # Pass viash temp dir
            export VIASH_TEMP="${viash_temp}"
            # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
            export PATH="./:${moduleDir}:\$PATH"
            ./${params.spaceranger_count.tests.testScript} | tee $output
            """
          else
            """
            # Some useful stuff
            export NUMBA_CACHE_DIR=/tmp/numba-cache
            # Running the pre-hook when necessary
            # Pass viash temp dir
            export VIASH_TEMP="${viash_temp}"
            # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
            export PATH="${moduleDir}:\$PATH"
            $cli
            """
      }
      
      workflow spaceranger_count {
      
        take:
        id_input_params_
      
        main:
      
        def key = "spaceranger_count"
      
        def id_input_output_function_cli_params_ =
          id_input_params_.map{ id, input, _params ->
      
            // Start from the (global) params and overwrite with the (local) _params
            def defaultParams = params[key] ? params[key] : [:]
            def overrideParams = _params[key] ? _params[key] : [:]
            def updtParams = defaultParams + overrideParams
            // Convert to List[Map] for the arguments
            def newParams = argumentsAsList(updtParams) + [ "id" : id ]
      
            // Generate output filenames, out comes a Map
            def output = outFromIn(newParams)
      
            // The process expects Path or List[Path], Maps need to be converted
            def inputsForProcess =
              (input in HashMap)
                ? input.collect{ k, v -> v }.flatten()
                : input
            def outputsForProcess = output.collect{ it.value }
      
            // For our machinery, we convert Path -> String in the input
            def inputs =
              (input in List || input in HashMap)
                ? (input in List)
                  ? input.collect{ it.name }
                  : input.collectEntries{ k, v -> [ k, (v in List) ? v.collect{it.name} : v.name ] }
                : input.name
            outputs = output.collectEntries{ [(it.name): it.value] }
      
            def finalParams = overrideIO(newParams, inputs, outputs)
      
            checkParams(finalParams)
      
            new Tuple6(
              id,
              inputsForProcess,
              outputsForProcess,
              effectiveContainer(finalParams),
              renderCLI([finalParams.command], finalParams.arguments),
              finalParams
            )
          }
      
        result_ = spaceranger_count_process(id_input_output_function_cli_params_)
          | join(id_input_params_)
          | map{ id, output, _params, input, original_params ->
              def parsedOutput = _params.arguments
                .findAll{ it.type == "file" && it.direction == "Output" }
                .withIndex()
                .collectEntries{ it, i ->
                  // with one entry, output is of type Path and array selections
                  // would select just one element from the path
                  [(it.name): (output in List) ? output[i] : output ]
                }
              new Tuple3(id, parsedOutput, original_params)
            }
      
        result_
           | filter { it[1].keySet().size() > 1 }
           | view{">> Be careful, multiple outputs from this component!"}
      
        emit:
        result_.flatMap{ it ->
          (it[1].keySet().size() > 1)
            ? it[1].collect{ k, el -> [ it[0], [ (k): el ], it[2] ] }
            : it[1].collect{ k, el -> [ it[0], el, it[2] ] }
        }
      }
      
      workflow {
        def id = params.id
        def fname = "spaceranger_count"
      
        def _params = params
      
        // could be refactored to be FP
        for (entry in params[fname].arguments) {
          def name = entry.value.name
          if (params[name] != null) {
            params[fname].arguments[name].value = params[name]
          }
        }
      
        def inputFiles = params.spaceranger_count
          .arguments
          .findAll{ key, par -> par.type == "file" && par.direction == "Input" }
          .collectEntries{ key, par -> [(par.name): file(params[fname].arguments[par.name].value) ] }
      
        def ch_ = Channel.from("").map{ s -> new Tuple3(id, inputFiles, params)}
      
        result = spaceranger_count(ch_)
        result.view{ it[1] }
      }
      
      // This workflow is not production-ready yet, we leave it in for future dev
      // TODO
      workflow test {
      
        take:
        rootDir
      
        main:
        params.test = true
        params.spaceranger_count.output = "spaceranger_count.log"
      
        Channel.from(rootDir) \
          | filter { params.spaceranger_count.tests.isDefined } \
          | map{ p -> new Tuple3(
              "tests",
              params.spaceranger_count.tests.testResources.collect{ file( p + it ) },
              params
          )} \
          | spaceranger_count
      
        emit:
        spaceranger_count.out
      }

    dest: "main.nf"
  description: "Align fastqs and detect tissues"
  usage: "spaceranger count --input /path/to/bcl --sample \\\n  test_sample --id 13423\
    \ --lanes 1\n"
  tests:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../test_resources"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  add_resources_to_path: false
platform:
  type: "nextflow"
  id: "nextflow"
  registry: "ghcr.io"
  organization: "czbiohub/utilities"
  namespace_separator: "_"
  publish: true
  separate_multiple_outputs: true
  labels: []
platforms: []
info:
  config: "src/alignment/spaceranger_count/config.vsh.yaml"
  platform: "nextflow"
  output: "target/nextflow/alignment/spaceranger_count"
  executable: "target/nextflow/alignment/spaceranger_count/spaceranger_count"
  viash_version: "0.5.10.1"
  git_commit: "fe14e9f22e91931970fd0f8147c8fbedf70f09d1"
  git_remote: "https://github.com/czbiohub/utilities"
