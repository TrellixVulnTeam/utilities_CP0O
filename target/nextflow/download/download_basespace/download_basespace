#!/usr/bin/env bash

#######################################
#    download_basespace main_build    #
#######################################

# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="download_basespace"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "download_basespace main_build"
  echo "Download a BCL file/folder from basespace."
  echo
  echo -n "Usage: "
  echo "download_basespace --id 195891710 --output output_dir/"
  echo
  echo "Options:"

  echo "   --id"
  echo "        type: string, required parameter"
  echo "        example: 195891710"
  echo "        An ID of entity"
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: path_to_dir"
  echo "        Path where to store BCL output."
  echo ""


  echo "   -v, --verbose"
  echo "        type: boolean_true"
  echo "        Increase verbosity"
  echo ""


  echo "   --compress"
  echo "        type: boolean_true"
  echo "        Write gzipped tar archive."
  echo ""


  echo "   --overwrite"
  echo "        type: boolean_true"
  echo "        Overwrite files that already exist and have the same file size"
  echo ""


  echo "   --extension"
  echo "        type: string, multiple values allowed"
  echo "        example: xml:txt"
  echo "        List of extensions to filter by"
  echo ""


  echo "   --api_server"
  echo "        type: string"
  echo "        default: https://api.basespace.illumina.com"
  echo "        BaseSpace API hostname"
  echo ""


  echo "   --access_token"
  echo "        type: string"
  echo "        default: 610b74406284445fa38691d551c30e4a"
  echo "        Manual BaseSpace API access token"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "download_basespace main_build"
            exit
            ;;
        --id)
            VIASH_PAR_ID="$2"
            shift 2
            ;;
        --id=*)
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --verbose)
            VIASH_PAR_VERBOSE=true
            shift 1
            ;;
        -v)
            VIASH_PAR_VERBOSE=true
            shift 1
            ;;
        --compress)
            VIASH_PAR_COMPRESS=true
            shift 1
            ;;
        --overwrite)
            VIASH_PAR_OVERWRITE=true
            shift 1
            ;;
        --extension)
            if [ -z "$VIASH_PAR_EXTENSION" ]; then
              VIASH_PAR_EXTENSION="$2"
            else
              VIASH_PAR_EXTENSION="$VIASH_PAR_EXTENSION:""$2"
            fi
            shift 2
            ;;
        --extension=*)
            if [ -z "$VIASH_PAR_EXTENSION" ]; then
              VIASH_PAR_EXTENSION=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_EXTENSION="$VIASH_PAR_EXTENSION:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --api_server)
            VIASH_PAR_API_SERVER="$2"
            shift 2
            ;;
        --api_server=*)
            VIASH_PAR_API_SERVER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --access_token)
            VIASH_PAR_ACCESS_TOKEN="$2"
            shift 2
            ;;
        --access_token=*)
            VIASH_PAR_ACCESS_TOKEN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_ID" ]; then
  ViashError '--id' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_VERBOSE" ]; then
  VIASH_PAR_VERBOSE="false"
fi
if [ -z "$VIASH_PAR_COMPRESS" ]; then
  VIASH_PAR_COMPRESS="false"
fi
if [ -z "$VIASH_PAR_OVERWRITE" ]; then
  VIASH_PAR_OVERWRITE="false"
fi
if [ -z "$VIASH_PAR_API_SERVER" ]; then
  VIASH_PAR_API_SERVER="https://api.basespace.illumina.com"
fi
if [ -z "$VIASH_PAR_ACCESS_TOKEN" ]; then
  VIASH_PAR_ACCESS_TOKEN="610b74406284445fa38691d551c30e4a"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-download_basespace-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
#!/bin/bash

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "par_id='$VIASH_PAR_ID'"; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='$VIASH_PAR_OUTPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_VERBOSE+x} ]; then echo "par_verbose='$VIASH_PAR_VERBOSE'"; fi )
$( if [ ! -z ${VIASH_PAR_COMPRESS+x} ]; then echo "par_compress='$VIASH_PAR_COMPRESS'"; fi )
$( if [ ! -z ${VIASH_PAR_OVERWRITE+x} ]; then echo "par_overwrite='$VIASH_PAR_OVERWRITE'"; fi )
$( if [ ! -z ${VIASH_PAR_EXTENSION+x} ]; then echo "par_extension='$VIASH_PAR_EXTENSION'"; fi )
$( if [ ! -z ${VIASH_PAR_API_SERVER+x} ]; then echo "par_api_server='$VIASH_PAR_API_SERVER'"; fi )
$( if [ ! -z ${VIASH_PAR_ACCESS_TOKEN+x} ]; then echo "par_access_token='$VIASH_PAR_ACCESS_TOKEN'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END

extra_params=( )

if [ "\$par_verbose" == "true" ]; then 
  extra_params+=( "--verbose" )
fi
if [ "\$par_compress" == "true" ]; then 
  extra_params+=( "--compress" )
fi
if [ "\$par_overwrite" == "true" ]; then 
  extra_params+=( "--overwrite" )
fi
if [ ! -z "\$par_extension" ]; then
  IFS=":"
  for var in \$par_extension; do
    unset IFS
    extra_params+=( "--extension" "\$var" )
  done
fi

bs download run \\
  --id "\$par_id" \\
  --output "\$par_output" \\
  --api-server "\$par_api_server" \\
  --access-token "\$par_access_token" \\
  "\${extra_params[@]}"
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
