  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    download_basespace__id = "viash_no_value"
    download_basespace__output = "viash_no_value"
    download_basespace__verbose = "no_default_value_configured"
    download_basespace__compress = "no_default_value_configured"
    download_basespace__overwrite = "no_default_value_configured"
    download_basespace__extension = "no_default_value_configured"
    download_basespace__api_server = "https://api.basespace.illumina.com"
    download_basespace__access_token = "610b74406284445fa38691d551c30e4a"
    id = ""
    testScript = "run_test.sh"
    testResources = [ "run_test.sh" ]
    download_basespace {
      name = "download_basespace"
      container = "download_download_basespace"
      containerTag = "main_build"
      containerRegistry = ""
      command = "download_basespace"
      tests {
        isDefined = true
        testScript = "run_test.sh"
        testResources = [ "run_test.sh" ]
      }
      arguments {
        id {
          name = "id"
          otype = "--"
          required = true
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__id}"
          example = "195891710"
          description = "An ID of entity"
        }
        output {
          name = "output"
          otype = "--"
          required = true
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__output}"
          example = "path_to_dir"
          description = "Path where to store BCL output."
        }
        verbose {
          name = "verbose"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__verbose}"
          description = "Increase verbosity"
        }
        compress {
          name = "compress"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__compress}"
          description = "Write gzipped tar archive."
        }
        overwrite {
          name = "overwrite"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__overwrite}"
          description = "Overwrite files that already exist and have the same file size"
        }
        extension {
          name = "extension"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = true
          multiple_sep = ":"
          value = "${params.download_basespace__extension}"
          example = "xml:txt"
          description = "List of extensions to filter by"
        }
        api_server {
          name = "api_server"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__api_server}"
          dflt = "https://api.basespace.illumina.com"
          description = "BaseSpace API hostname"
        }
        access_token {
          name = "access_token"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.download_basespace__access_token}"
          dflt = "610b74406284445fa38691d551c30e4a"
          description = "Manual BaseSpace API access token"
        }
      }
    }
  }